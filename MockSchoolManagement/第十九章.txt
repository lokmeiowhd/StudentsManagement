一、Http状态码
Http状态码是用以表示网页服务器Http响应状态的3位数字代码。状态码的第一个数字代表了响应的5种状态之一。
4XX表示请求错误，代表了客户端可能发生了错误，从而妨碍了服务器的处理。常见的有401状态码、403状态码和404状态码。
401状态码：请求要求身份验证，对于需要登录的网页服务器可能返回此响应。
403状态码：服务器已经理解请求但是拒绝执行它。与401响应不同的是：
身份验证并不能提供任何帮助。而且这个请求也不应该被重复提交。
404状态码：请求失败，请求希望得到的资源在服务器上未发现。
没有信息告诉用户这个状态到底是暂时的还是永久的。
404被广泛应用于服务器不想揭示到底为何请求被拒绝或者没有其他适合的响应可用的情况下。

5XX系列表示服务器在处理请求的过程中有错误或者异常状态发生，也可能是服务器意识到以当前的软硬件资源无法完成对请求的处理。
500状态码：服务器遇到了一个未曾预料的状况，导致了无法完成对请求的处理
一般来说这个问题会出现在服务器的程序码出错时。
503状态码：由于临时的服务器维护或者过载，因此服务器无法处理请求。
通常这是暂时状态，一段时间后会恢复。

二、Asp.net Core中处理404错误
UseStatusCodePages()

UseStatusCodePagesWithRedirects()
流程如下：
1.UseStatusCodePagesWithRedirects()中间件拦截此请求，并将其改为302,将其指向错误路径（/Error/404）
2.302状态码标识所请求的资源的url已被暂时更改。
3.由于发出了重定向，地址栏中的url也从/market/food更改为/Error/404
4.请求会经过http管道并由MVC中间件处理，最终返回状态为200，然后导航到NotFound视图中，意味着请求已成功完成
5.对整个请求流程的浏览器而言，没有404错误信息

UseStatusCodePagesWithReExecute()
流程如下：
1.UseStatusCodePagesWithReExecute()中间件拦截404状态码并重新执行将其指向url的管道，即/Error/404
2.整个请求流经http管道并由mvc中间件处理，该中间件返回NotFound视图的HTML的状态码仍是200
3.当响应流出到客户端时，它会通过该中间件使用HTML响应，将200状态码替换为原始的404状态码。
4.这个中间件重新执行管道应该正确的状态码（404），只返回自定义视图NotFound
5.因为它只是重新执行管道而不是发出重定向请求，所以在地址栏保留原始/market/food，而不会更改为/Error/404

404错误触发是当访问不存在的地址或者ID没有对应的值时产生
500错误触发是当发生异常错误时产生


